<h1>ルート編集</h1>

<%= form_with(model: @route, local: true, html: { multipart: true }) do |f| %>

  <p>
    <%= f.label :title, "タイトル" %><br>
    <%= f.text_field :title %>
  </p>

  <p>
    <%= f.label :description, "説明" %><br>
    <%= f.text_area :description %>
  </p>

  <p>
    <%= f.label :distance, "距離(km)" %><br>
    <%= f.number_field :distance %>
  </p>

  <p>
    <%= f.label :start_location, "開始地点" %><br>
    <%= f.text_field :start_location %>
  </p>

  <p>
    <%= f.label :end_location, "終了地点" %><br>
    <%= f.text_field :end_location %>
  </p>

  <!-- app/views/routes/_form.html.erb (部分テンプレート化している場合) -->
<p>
  <%= f.label :latitude, "緯度" %><br>
  <%= f.number_field :latitude, step: 0.000001 %>
</p>

<p>
  <%= f.label :longitude, "経度" %><br>
  <%= f.number_field :longitude, step: 0.000001 %>
</p>
 <!-- ★ 開始地点（start_lat, start_lng） -->
  <p>
    <%= f.label :start_lat, "始点 緯度" %><br>
    <%= f.number_field :start_lat, step: 0.000001, id: "startLat" %>
  </p>

  <p>
    <%= f.label :start_lng, "始点 経度" %><br>
    <%= f.number_field :start_lng, step: 0.000001, id: "startLng" %>
  </p>

  <!-- ★ 終了地点（end_lat, end_lng） -->
  <p>
    <%= f.label :end_lat, "終点 緯度" %><br>
    <%= f.number_field :end_lat, step: 0.000001, id: "endLat" %>
  </p>

  <p>
    <%= f.label :end_lng, "終点 経度" %><br>
    <%= f.number_field :end_lng, step: 0.000001, id: "endLng" %>
  </p>




  <p>
  <%= f.label :image, "ルートの写真" %><br>
  <%= f.file_field :image %>
  </p>


  <!-- ルートを描画ボタン -->
  <button id="drawRoute" type="button">ルートを描画</button>

  <div id="map" style="height: 400px; margin-top: 1rem;"></div>


  <p>
    <%= f.submit "更新" %>
  </p>
<% end %>

<%= link_to "一覧に戻る", routes_path %>

<script>
  document.addEventListener("turbo:load", () => {
    const mapElement = document.getElementById("map");
    if (!mapElement) return;

    // 古いマップの削除
    if (window.myMap && typeof window.myMap.remove === "function") {
      window.myMap.remove();
    }

    // 地図を初期化
    const map = L.map("map").setView([35.681236, 139.767125], 13);
    window.myMap = map;

    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      maxZoom: 19,
      attribution: "© OpenStreetMap",
    }).addTo(map);

    // 既存データの取得
    let waypoints = [];
    try {
      const hidden = document.getElementById("waypointsInput");
      if (hidden && hidden.value) {
        const parsed = JSON.parse(hidden.value);
        if (Array.isArray(parsed)) {
          waypoints = parsed;
        }
      }
    } catch (e) {
      console.warn("🚫 waypoints の JSON 読み込み失敗", e);
    }

    let polyline = null;
    let markers = [];

    function drawPolyline() {
      if (polyline) map.removeLayer(polyline);

      const latlngs = waypoints.map(p => {
        const lat = parseFloat(p.lat ?? p.latitude ?? p["lat"]);
        const lng = parseFloat(p.lng ?? p.longitude ?? p["lng"]);
        return (!isNaN(lat) && !isNaN(lng)) ? [lat, lng] : null;
      }).filter(p => Array.isArray(p) && p.length === 2);

      console.log("✅ 最終的なlatlngs:", latlngs);

      if (latlngs.length >= 2) {
        polyline = L.polyline(latlngs, { color: "blue" }).addTo(map);
      }

      // マーカーも描画（初期化後の再描画も含め）
      markers.forEach(marker => map.removeLayer(marker));
      markers = [];
      latlngs.forEach((coords, index) => {
        const marker = L.marker(coords)
          .addTo(map)
          .bindPopup(`地点 ${index + 1}`);
        markers.push(marker);
      });
    }

    function updateHiddenInput() {
      const input = document.getElementById("waypointsInput");
      if (!input) return;

      const clean = waypoints.map(p => {
        const lat = parseFloat(p.lat ?? p.latitude ?? p["lat"]);
        const lng = parseFloat(p.lng ?? p.longitude ?? p["lng"]);
        return (!isNaN(lat) && !isNaN(lng)) ? { lat, lng } : null;
      }).filter(p => p !== null);

      input.value = JSON.stringify(clean);
      console.log("📦 保存直前のデータ（クリーン済）", clean);
    }

    // 地図クリックでマーカー追加
    map.on("click", function (e) {
      const latlng = e.latlng;
      waypoints.push({ lat: latlng.lat, lng: latlng.lng });
      drawPolyline();
      updateHiddenInput();
    });

    // リセットボタン
    const resetBtn = document.getElementById("resetRoute");
    if (resetBtn) {
      resetBtn.addEventListener("click", () => {
        waypoints = [];
        markers.forEach(m => map.removeLayer(m));
        markers = [];
        if (polyline) {
          map.removeLayer(polyline);
          polyline = null;
        }
        updateHiddenInput();
      });
    }

    // 初回描画
    drawPolyline();
    updateHiddenInput();
  });
</script>
