<h1 class="text-2xl font-bold mb-6 text-center">新しいルートを作成</h1>

<div class="max-w-2xl mx-auto px-4">
  <%= form_with(model: @route, local: true, html: { multipart: true, class: "space-y-6" }) do |f| %>
    <%= hidden_field_tag "route[waypoints]", @route.waypoints.to_json.presence || "[]", id: "route_waypoints" %>

    <% [:title, :description, :distance, :start_location, :end_location, :image].each do |field| %>
      <div class="mb-4">
        <%= f.label field, class: "block font-medium mb-1" %>
        <% input_class = "w-full border rounded px-3 py-2" + (@route.errors[field].any? ? " border-red-500 bg-red-50" : "") %>

        <% if field == :description %>
          <%= f.text_area field, rows: 4, class: input_class %>
        <% elsif field == :image %>
          <%= f.file_field field, class: input_class %>
        <% elsif field == :distance %>
          <%= f.number_field field, class: input_class %>
        <% else %>
          <%= f.text_field field, class: input_class %>
        <% end %>

        <% if @route.errors[field].any? %>
          <p class="text-sm text-red-500 mt-1"><%= @route.errors.full_messages_for(field).join(", ") %></p>
        <% end %>
      </div>
    <% end %>

    <div class="flex gap-4 items-center">
      <button id="resetRoute" type="button" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded">
        地図をリセット
      </button>
    </div>

    <div id="map" class="rounded border mt-4" style="height: 400px;"></div>

    <div>
      <%= f.submit "登録", class: "bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded mt-6" %>
    </div>
  <% end %>
</div>





<script>
  let alreadyInitialized = false;

  document.addEventListener("turbo:load", () => {
    if (alreadyInitialized) return;
    alreadyInitialized = true;

    console.log("🔥 Turbo is working!");

    const mapElement = document.getElementById("map");
    if (!mapElement) return;

    if (window.myMap) {
      window.myMap.remove();
      window.myMap = null;
    }

    window.myMap = L.map("map").setView([35.681236, 139.767125], 13);
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(window.myMap);

    // 💡 必ずグローバルで定義
    window.waypoints = [];
    window.markers = [];
    window.polyline = null;

    const waypointsInput = document.getElementById("route_waypoints");

    // 🚀 初期値を読み込む（ここが超重要）
    if (waypointsInput?.value) {
      try {
        const parsed = JSON.parse(waypointsInput.value);
        if (Array.isArray(parsed)) {
          window.waypoints = parsed.filter(p => typeof p === "object" && "lat" in p && "lng" in p);
        }
      } catch (e) {
        console.warn("📛 JSON parse failed", e);
      }
    }

    window.drawPolylineAndMarkers = function () {
      const map = window.myMap;
      const waypoints = window.waypoints;

      if (!map || !Array.isArray(waypoints)) {
        console.warn("❗ mapまたはwaypointsが未定義。描画を中止");
        return;
      }

      // 前の polyline 削除
      if (window.polyline && map.hasLayer(window.polyline)) {
        map.removeLayer(window.polyline);
      }

      // 前のマーカー削除
      if (Array.isArray(window.markers)) {
        window.markers.forEach(marker => {
          if (marker && map.hasLayer(marker)) {
            map.removeLayer(marker);
          }
        });
      }
      window.markers = [];

      // 有効なlatlngsのみ抽出（念のため全パターン考慮）
      const latlngs = waypoints
        .map(p => {
          const lat = parseFloat(p.lat ?? p.latitude ?? p["lat"]);
          const lng = parseFloat(p.lng ?? p.longitude ?? p["lng"]);
          return (!isNaN(lat) && !isNaN(lng)) ? [lat, lng] : null;
        })
        .filter(p => Array.isArray(p) && p.length === 2);

      console.log("🎯 latlngs (Polyline用):", latlngs);
      console.log("🧪 生のwaypoints:", waypoints);

      // マーカー追加
      latlngs.forEach((coords, i) => {
        const marker = L.marker(coords).addTo(map).bindPopup(`地点 ${i + 1}`);
        window.markers.push(marker);
      });

      // 線を引く（2点以上のときだけ）
      if (latlngs.length >= 2) {
        try {
          window.polyline = L.polyline(latlngs, { color: "blue" }).addTo(map);
        } catch (e) {
          console.warn("🔥 polyline error:", e, latlngs);
        }
      }
    };



    function updateHiddenInput() {
      if (waypointsInput) {
        waypointsInput.value = JSON.stringify(window.waypoints);
        console.log("💾 hidden更新:", window.waypoints);
      }
    }

    // 🖱️ マップクリック時
    window.myMap.on("click", (e) => {
      window.waypoints.push({ lat: e.latlng.lat, lng: e.latlng.lng });
      updateHiddenInput();
      drawPolylineAndMarkers();
    });

    // 🔁 リセットボタン
    const resetBtn = document.getElementById("resetRoute");
    if (resetBtn) {
      resetBtn.addEventListener("click", () => {
        window.waypoints = [];
        updateHiddenInput();
        drawPolylineAndMarkers();
      });
    }

    // ✅ 遅延描画（Turbo描画完了後）
    setTimeout(() => {
      window.myMap.invalidateSize();
      drawPolylineAndMarkers();
    }, 300);
  });

  // 💡 ページキャッシュ前にMap削除
  document.addEventListener("turbo:before-cache", () => {
    if (window.myMap) {
      window.myMap.remove();
      window.myMap = null;
    }
    window.waypoints = []; // 👈 ここも絶対クリアする
    window.polyline = null;
    window.markers = [];
    alreadyInitialized = false;
  });

  // 🔁 Turbo再描画時の追加フォロー（念のため）
  document.addEventListener("turbo:render", () => {
    if (window.myMap) {
      window.myMap.invalidateSize();
      if (typeof window.drawPolylineAndMarkers === "function") {
        window.drawPolylineAndMarkers();
      }
    }
  });

</script>
