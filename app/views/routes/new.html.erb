<h1>新規ルート作成</h1>

<%= form_with(model: @route, local: true, html: { multipart: true }) do |f| %>
  <%= hidden_field_tag "route[waypoints]", @route.waypoints.to_json.presence || "[]", id: "route_waypoints" %>

  <p>
    <%= f.label :title, "タイトル" %><br>
    <%= f.text_field :title %>
  </p>

  <p>
    <%= f.label :description, "説明" %><br>
    <%= f.text_area :description %>
  </p>

  <p>
    <%= f.label :distance, "距離(km)" %><br>
    <%= f.number_field :distance %>
  </p>

  <p>
    <%= f.label :start_location, "開始地点" %><br>
    <%= f.text_field :start_location %>
  </p>

  <p>
    <%= f.label :end_location, "終了地点" %><br>
    <%= f.text_field :end_location %>
  </p>

  <!-- app/views/routes/_form.html.erb (部分テンプレート化している場合) -->
<p>
  <%= f.label :latitude, "緯度" %><br>
  <%= f.number_field :latitude, step: 0.000001 %>
</p>

<p>
  <%= f.label :longitude, "経度" %><br>
  <%= f.number_field :longitude, step: 0.000001 %>
</p>

<!-- ★ 開始地点（start_lat, start_lng） -->
  <p>
    <%= f.label :start_lat, "始点 緯度" %><br>
    <%= f.number_field :start_lat, step: 0.000001, id: "startLat" %>
  </p>

  <p>
    <%= f.label :start_lng, "始点 経度" %><br>
    <%= f.number_field :start_lng, step: 0.000001, id: "startLng" %>
  </p>

  <!-- ★ 終了地点（end_lat, end_lng） -->
  <p>
    <%= f.label :end_lat, "終点 緯度" %><br>
    <%= f.number_field :end_lat, step: 0.000001, id: "endLat" %>
  </p>

  <p>
    <%= f.label :end_lng, "終点 経度" %><br>
    <%= f.number_field :end_lng, step: 0.000001, id: "endLng" %>
  </p>



  <p>
  <%= f.label :image, "ルートの写真" %><br>
  <%= f.file_field :image %>
  </p>


<!-- ルートを描画ボタン -->
  <button id="drawRoute" type="button">ルートを描画</button>

  <div id="map" style="height: 400px; margin-top: 1rem;"></div>
  <button id="resetRoute" type="button">リセット</button>



  <p>
    <%= f.submit "登録" %>
  </p>
<% end %>



<script>
  let alreadyInitialized = false;

  document.addEventListener("turbo:load", () => {
    if (alreadyInitialized) return;
    alreadyInitialized = true;

    console.log("🔥 Turbo is working!");

    const mapElement = document.getElementById("map");
    if (!mapElement) return;

    if (window.myMap) {
      window.myMap.remove();
      window.myMap = null;
    }

    window.myMap = L.map("map").setView([35.681236, 139.767125], 13);
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(window.myMap);

    // 💡 必ずグローバルで定義
    window.waypoints = [];
    window.markers = [];
    window.polyline = null;

    const waypointsInput = document.getElementById("route_waypoints");

    // 🚀 初期値を読み込む（ここが超重要）
    if (waypointsInput?.value) {
      try {
        const parsed = JSON.parse(waypointsInput.value);
        if (Array.isArray(parsed)) {
          window.waypoints = parsed.filter(p => typeof p === "object" && "lat" in p && "lng" in p);
        }
      } catch (e) {
        console.warn("📛 JSON parse failed", e);
      }
    }

    window.drawPolylineAndMarkers = function () {
      const map = window.myMap;
      const waypoints = window.waypoints;

      if (!map || !Array.isArray(waypoints)) {
        console.warn("❗ mapまたはwaypointsが未定義。描画を中止");
        return;
      }

      // 前の polyline 削除
      if (window.polyline && map.hasLayer(window.polyline)) {
        map.removeLayer(window.polyline);
      }

      // 前のマーカー削除
      if (Array.isArray(window.markers)) {
        window.markers.forEach(marker => {
          if (marker && map.hasLayer(marker)) {
            map.removeLayer(marker);
          }
        });
      }
      window.markers = [];

      // 有効なlatlngsのみ抽出（念のため全パターン考慮）
      const latlngs = waypoints
        .map(p => {
          const lat = parseFloat(p.lat ?? p.latitude ?? p["lat"]);
          const lng = parseFloat(p.lng ?? p.longitude ?? p["lng"]);
          return (!isNaN(lat) && !isNaN(lng)) ? [lat, lng] : null;
        })
        .filter(p => Array.isArray(p) && p.length === 2);

      console.log("🎯 latlngs (Polyline用):", latlngs);
      console.log("🧪 生のwaypoints:", waypoints);

      // マーカー追加
      latlngs.forEach((coords, i) => {
        const marker = L.marker(coords).addTo(map).bindPopup(`地点 ${i + 1}`);
        window.markers.push(marker);
      });

      // 線を引く（2点以上のときだけ）
      if (latlngs.length >= 2) {
        try {
          window.polyline = L.polyline(latlngs, { color: "blue" }).addTo(map);
        } catch (e) {
          console.warn("🔥 polyline error:", e, latlngs);
        }
      }
    };



    function updateHiddenInput() {
      if (waypointsInput) {
        waypointsInput.value = JSON.stringify(window.waypoints);
        console.log("💾 hidden更新:", window.waypoints);
      }
    }

    // 🖱️ マップクリック時
    window.myMap.on("click", (e) => {
      window.waypoints.push({ lat: e.latlng.lat, lng: e.latlng.lng });
      updateHiddenInput();
      drawPolylineAndMarkers();
    });

    // 🔁 リセットボタン
    const resetBtn = document.getElementById("resetRoute");
    if (resetBtn) {
      resetBtn.addEventListener("click", () => {
        window.waypoints = [];
        updateHiddenInput();
        drawPolylineAndMarkers();
      });
    }

    // ✅ 遅延描画（Turbo描画完了後）
    setTimeout(() => {
      window.myMap.invalidateSize();
      drawPolylineAndMarkers();
    }, 300);
  });

  // 💡 ページキャッシュ前にMap削除
  document.addEventListener("turbo:before-cache", () => {
    if (window.myMap) {
      window.myMap.remove();
      window.myMap = null;
    }
    window.waypoints = []; // 👈 ここも絶対クリアする
    window.polyline = null;
    window.markers = [];
    alreadyInitialized = false;
  });

  // 🔁 Turbo再描画時の追加フォロー（念のため）
  document.addEventListener("turbo:render", () => {
    if (window.myMap) {
      window.myMap.invalidateSize();
      if (typeof window.drawPolylineAndMarkers === "function") {
        window.drawPolylineAndMarkers();
      }
    }
  });

</script>
